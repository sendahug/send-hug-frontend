version: 2.1
orbs:
  node: circleci/node@1.1
  browser-tools: circleci/browser-tools@1.1.1
jobs:
  test:
    docker:
      - image: cimg/node:12.18-browsers
    environment:
      CHROME_BIN: /usr/bin/google-chrome
    steps:
      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run: google-chrome --version
      - restore_cache:
          key: my-project-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run: npm install
      - save_cache:
          key: my-project-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"
      - run: npm test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
      - run: bash <(curl -s https://codecov.io/bash) -f coverage/lcov.info -X fix
  e2e:
    docker:
      - image: cimg/node:12.18-browsers
        environment:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/test-capstone?sslmode=disable
          FLASK_APP: app.py
          FLASK_ENV: development
          FRONTEND: http://localhost:3000
      - image: circleci/postgres:12.5
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: test-capstone
          POSTGRES_PASSWORD: "password"
    environment:
      CHROME_BIN: /usr/bin/google-chrome
    steps:
      - run: git clone https://github.com/sendahug/send-hug-backend
      - run: cd send-hug-backend
      - run: sudo apt-get update
      - run:
          name: Install Python
          command: |
            wget https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tgz
            sudo apt-get upgrade
            sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \
                libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
                libncurses5-dev libncursesw5-dev xz-utils tk-dev
            tar xvf Python-3.9.0.tgz
            cd Python-3.9.0
            ./configure --enable-optimizations --with-ensurepip=install
            make -j 8
            sudo make altinstall
      - run: sudo apt-get install -y python3-pip
      - run: sudo apt-get install -y postgresql-client
      - run:
          name: Install Python deps
          command: |
            pip3 install -r requirements.txt
            python3 -m pip install --upgrade pip
      # Dockerize installation to wait for the database to load
      # Taken from: https://support.circleci.com/hc/en-us/articles/360006773953-Race-Conditions-Wait-For-Database
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Restore database
          command: psql -h localhost -p 5432 -U postgres test-capstone < capstone_db.sql
      - run:
          name: Start backend
          command: flask run
          background: true
      - run: cd ..
      - run: checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run: google-chrome --version
      - restore_cache:
          key: my-project-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run: npm install
      - save_cache:
          key: my-project-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"
      - run: npm e2e

workflows:
  run-testing:
    jobs:
      - test
      - e2e:
        filters:
          branches:
            only:
              - e2e-setup
