{
  "pr_number": 1648,
  "changes": [
    {
      "change": "Breaking Changes",
      "description": "Replaced Auth0 with Firebase as the primary Auth Provider. The Send a Hug team determined that Firebase is a better fit for our long-term purposes, so we decided to make the switch. This change includes:\n\t- Replaced the Auth0 JavaScript SDK with the Firebase SDK, along with @angular/fire (Angular's Firebase module).\n\t- Replaced the Auth0 ID property in the users' model with a Firebase ID property (matching the replaced column in the back-end).\n\t- Replaced the Auth0-related properties in the environment files (TypeScript only) with Firebase-related properties.\n\t- Updated the login page to include a form (enabling logging in/signing up with username and password), and buttons to log in (or sign up) using Google or Apple. The new login page serves as a way to both log in and create a new account in Firebase, and allows resetting the password of an existing account.\n\t- Moved all login functionality to the updated login page. Now, instead of the Messaging page's and the User Page's login functionality, both pages show a link to the login page if the user isn't logged in.\n\t- Changed the process through which the API clients gets the current user's JWT. Previously, every time the token was refreshed or changed, the Auth Service was responsible for storing the updated token and passing it to the API Client. Now, the API Client uses Firebase's `getIdToken` method to fetch the latest token before each request is made.\n\t- The app now uses angularfire's `authState` observable to check whether a user is still logged in (instead of checking the hash and fetching the latest JWT from local storage).\n\t- The Auth Service's authentication-related methods were updated to use Firebase's methods (e.g., login, logout). A few new methods were also added to enable signing up, fetching the current user's JWT, and sending a password reset email."
    },
    {
      "change": "Features",
      "description": "Added a new Password Reset Form component to allow resetting a user's password (via Firebase), and a new Sign Up Page component (and route) to allow users to complete the signup process."
    },
    {
      "change": "Breaking Changes",
      "description": "The sign-up process was updated for Firebase and changed into a more streamlined process. Previously, once a user was redirected from Auth0 back to the platform, we had to make a request to the server to check whether the user exists, and if they didn't, to create their account automatically. This forced us to perform two requests every time and didn't allow users to set their own display names from the start. Now, the internal login page allows separating existing users from new users - the new users (who select 'sign up', are immediately redirected to the new Sign Up page (which allows them to set their own display name and ensures they accept the terms and conditions), while existing users can login and have their details fetched from the back-end immediately. As a fallback, if a user logs in via a third-party provider (e.g., Apple or Google) and they never registered before, the front-end still attempts to fetch their details from the back-end, and if they don't exist, they're redirected to the Sign Up page as well to complete sign-up. No user can perform actions that require authentication without completing the new registration process."
    },
    {
      "change": "Breaking Changes",
      "description": "The Auth Service's method for fetching the current user's details no longer automatically calls the method for creating users, to match the new registration process."
    },
    {
      "change": "Changes",
      "description": "Removed the unnecessary check for whether a user is logged in from the User Page. The App Component, which contains all views, already performs that check, so there's no reason to perform it within the User Page too."
    },
    {
      "change": "Changes",
      "description": "Rewrote the Auth Service to use observables for all async actions. Instead of doing all post-processing when subscribing to the async observable as we did previously, the processing is now done in different operators, depending on the type of processing that needs to be done (e.g., changes to other Auth Service properties are grouped within RXJS's `tap` operator). Each of these async methods (e.g., `fetchUser`) then returns an observable, which allows the calling component to subscribe to it and perform actions once the async process is complete."
    },
    {
      "change": "Chores",
      "description": "Excluded the tests' data files (located in src/tests) from the tests' coverage report."
    }
  ]
}
