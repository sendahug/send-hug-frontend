{
  "pr_number": 1755,
  "changes": [
    {
      "change": "Chores",
      "description": "Replaced Gulp with Vite as the build tool. This allows us to take advantage of HMR in development and creates a much better developer experience. The change includes:\n\t- Added an Angular Builder class for handling the Angular Compiler and the compilation process.\n\t- Added Vite plugins for handling compilation using the Builder class, linking libraries (using the [Angular Linker](https://angular.dev/tools/libraries/creating-libraries#consuming-partial-ivy-code-outside-the-angular-cli)), handling standalone files (e.g., the ServiceWorker) and handling global stylesheets.\n\t- Added a development tsconfig to ensure testing files and dependencies don't clutter the Vite server logs in development or break compilation at build time."
    },
    {
      "change": "Changes",
      "description": "The app is now compiled Ahead of Time (AOT) using the Angular Compiler (instead of being compiled Just In Time, as it was in the previous setup). This should lead to considerably fewer bugs in production, enable a smoother experience for users, and provide faster initial setup (the process generates smaller code bundles, as the app no longer requires the Angular compiler at runtime)."
    },
    {
      "change": "Chores",
      "description": "Deleted the old Cypress plugins file, which is no longer used and no longer supported."
    },
    {
      "change": "Chores",
      "description": "Replaced Karma with web-test-runner for unit tests. Karma [has been deprecated](https://github.com/karma-runner/karma?tab=readme-ov-file#karma-is-deprecated-and-is-not-accepting-new-features-or-general-bug-fixes) last year (the original blog post is no longer accessible), and the Angular team specified they plan to add support for web-test-runner as a direct alternative. As such, we made the decision to migrate to web-test-runner now. The change includes:\n\t- Replaced the Karma config with web-test-runner config.\n\t- Updated the old template inliner to include CSS inlining (if a component has scoped CSS).\n\t- Removed the old SVG inliner. SVG inlining is no longer required due to the way we process most SVGs now.\n\t- Added a plugin for transpiling the files in tests using the TypeScript API. This allows us to include decorator metadata in tests, which is required since we don't run the Angular compiler in tests.\n\t- Added a plugin for serving the files that aren't inlined in tests (e.g., the logo and the ServiceWorker).\n\t- Added an HTML file to use in web-test-runner tests. The file sets up the Jasmine environment, imports zone.js and zone.js/testing (which is needed for tests), and initialises the Angular test environment automatically for users. This means the test environment no longer needs to be initialised manually (using a `tests.ts` file)."
    },
    {
      "change": "Chores",
      "description": "Upgraded Angular to v18.1.3."
    },
    {
      "change": "Chores",
      "description": "Deleted the old Express server we used when the app was deployed in Heroku. Now that we're using Firebase Hosting to serve the files for us, it's no longer needed."
    },
    {
      "change": "Chores",
      "description": "Most of the app has been switched to follow the standalone components pattern. The components and services that used to be part of the AppCommonModule were moved back to the global scope, and the components have been set up as standalone. The components that used to be part of the AppModule have also been set up as standalone. This allowed us to remove unnecessary module code, simplify the structure of the app, and remove unnecessary imports from various components and modules. The User Module and Admin Module have remained set up as modules, with the plan to convert them to lazy-loaded modules in the near future."
    },
    {
      "change": "Chores",
      "description": "Replaced the deprecated HTTPClientModule and the Router Module with Angular's new HTTP and router providers."
    },
    {
      "change": "Chores",
      "description": "Added ng-mocks to handle mocking in tests. With the new standalone structure, it became difficult to import only the components/services we needed in tests, as their own requirements had to be imported too. The ng-mocks package allows us to stub all the components and services we don't need. That simplifies the developer experience and allows us to properly isolate components in unit tests."
    },
    {
      "change": "Changes",
      "description": "All SVGs that are edited using CSS (i.e., the navigation menu icons and the profile icons) have been inlined in the HTML. In the new structure the Angular Compiler handles the fetching and parsing of the component HTML, which makes it difficult to add the SVGs' code to the files at build-time. Instead, we chose to inline the few icons that needed to be styled dynamically, which also has the benefit of reducing the number of network calls the site needs to make when it's loaded."
    },
    {
      "change": "Chores",
      "description": "Deleted the old environment (e.g., `environment.ts`) files and moved all environment data to the `.env` files. Components and services that previously got environment files from the TypeScript environment files now get them directly from Vite (using `import.meta.env`, which is replaced in development/build by the environment variables' values). Maintaining separate environment files that basically just pull the values from Vite/Gulp added unnecessary extra work, so they were removed."
    },
    {
      "change": "Features",
      "description": "Added a new User Icon component. The component displays the icon the user selected and styles it with the colours the user selected. This allows us to remove the icon selection logic from various components (e.g., messaging, settings) and replace the previous method for updating the icon colours (by manipulating DOM elements directly) with styling using NgStyle."
    },
    {
      "change": "Chores",
      "description": "Added a script for auto-generating the sitemap based on the Angular router routes."
    },
    {
      "change": "Changes",
      "description": "The ServiceWorker's caching logic was updated to handle the new output structure generated by Vite. All the component HTML files and the unneeded SVGs were removed, and the JavaScript bundle file has been split to three files (as per the new structure)."
    },
    {
      "change": "Fixes",
      "description": "The ServiceWorker now correctly avoids caching the responses from the back-end. The previous build process still had the old (Heroku) URL set as the server URL, which meant that the requests sent to the current back-end weren't correctly ignored. The previous build process also only handled a production environment, which meant the exclusion wouldn't have worked in staging even with the correct URL being set. The URL is now adjusted based on the environment and was updated to only handle the current back-end URLs."
    }
  ]
}
